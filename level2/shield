#!/usr/bin/env node

"use strict";

var http = require('http');
var httpProxy = require('./network_simulation/lib/proxy');
var checkServer = require('./network_simulation/lib/check_server');
var nopt = require('nopt');
var url = require('url');

var RequestData = function (request, response, buffer) {
  this.request = request;
  this.response = response;
  this.buffer = buffer;
};

var RequestTracker = function() {
    this.clientRequests = {};

    var totalRequests = 0;
    var blockedClients = {};

    this.blockClient = function(ip) {
        blockedClients[ip] = 1;
    }

    this.blockedClient = function(ip) {
        if (ip in blockedClients) {
            return true;
        }
        return false;
    }

    this.totalRequests = function() {
        this.totalRequests;
    }

    this.clientRequestPercentage = function(ip) {
        return Math.floor((this.clientRequests[ip] / totalRequests) * 100);
    }

    this.addClientRequest = function(ip) {
        // console.log("adding client request for: " + ip);

        if (ip in this.clientRequests) {
            this.clientRequests[ip]++;
        } else {
            this.clientRequests[ip] = 1;
        }
        totalRequests++;

        // console.log("client '" + ip + "' has " + this.clientRequests[ip] + " requests so far");
        // console.log("total requests: " + totalRequests);
        // console.log("client % " + this.clientRequestPercentage(ip));
    }
}

var tracker = new RequestTracker();

function ipFromRequest(reqData) {
  return reqData.request.headers['x-forwarded-for'];
}

function rejectRequest(reqData) {
  reqData.response.writeHead(400);
  reqData.response.end();
}

function currently_blacklisted(ip) {
    if (tracker.blockedClient(ip)) {
        return true;
    }
    var percent = tracker.clientRequestPercentage(ip);
    if (percent > 3) {
        // console.log("BLOCKING CLIENT '" + ip + "' with percentage: " + percent);
        tracker.blockClient(ip);
        return true;
    }

    // console.log("not blocking client '" + ip + "' with percentage: " + percent);
    return false;
}

var Queue = function (proxies, parameters) {
  this.proxies = proxies;
  this.parameters = parameters;
};
Queue.prototype.takeRequest = function (reqData) {
  tracker.addClientRequest(ipFromRequest(reqData));
  // Reject traffic as necessary:
  if (currently_blacklisted(ipFromRequest(reqData))) {
      rejectRequest(reqData);
      return;
  }
  // Otherwise proxy it through:
  var p = this.proxies[Math.floor(Math.random() * this.proxies.length)];
  p.proxyRequest(reqData.request, reqData.response, reqData.buffer);
};
Queue.prototype.requestFinished = function () {
  return;
};

function checkBackends(targets, path, response) {
  var toCheck = targets.map(function (target) {
    var output = {};
    output['host'] = target['host'];
    output['port'] = target['port'];
    output['path'] = path;
    return output;
  });
  var success = function () {
    response.writeHead(200, {"Content-Type": "application/json"});
    response.end()
  };
  var error = function () {
    response.writeHead(500, {"Content-Type": "application/json"});
    response.end()
  };
  checkServer.checkServers(toCheck, success, error);
}

function main() {
  var opts = {
    "out-ports": String,
    "in-port": String,
  };
  var parsed = nopt(opts),
      inPort = parsed['in-port'] || '3000',
      outPorts = parsed['out-ports'] ? parsed['out-ports'].split(",") : ['3001'],
      targets = [],
      target,
      proxies = [],
      proxy,
      i;

  for (i = 0; i < outPorts.length; i++) {
    target = {'host': 'localhost', 'port': outPorts[i]};
    targets.push(target);
    proxy = new httpProxy.HttpProxy({'target': target});
    proxy.identifier = i;
    proxies.push(proxy);
  }

  var queue = new Queue(proxies, {});
  for (i = 0; i < proxies.length; i++) {
    proxy = proxies[i];
    proxy.on("end", queue.requestFinished);
  }

  var server = http.createServer(function (req, res) {
    if (req.method === "HEAD") {
      // HEAD requests are used to monitor the status of the simulation
      // proxies[0].proxyRequest(reqData.request, reqData.response, reqData.buffer);
      checkBackends(targets, url.parse(req.url)['pathname'], res);
    } else {
      var buffer = httpProxy.buffer(req);
      var reqData = new RequestData(req, res, buffer);
      queue.takeRequest(reqData);
    }
  });

  server.on('close', function () {
    for (i = 0; i < proxies.length; i++) {
      proxies[i].close();
    }
  });
  console.log("The shield is up and listening.");
  server.listen(inPort);
}

main();
